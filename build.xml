<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="./lib/ant/ant2html.xsl"?> 
<project name="python-lab-automation" default="test">

	<description>
		Python Lab Automation ANT build file
	</description>
	
	<!--
	==============================================================================
	                         Global build properties
	==============================================================================
	-->

	<property environment="env" />
	<property file="${user.home}/universal-build.properties" />
	<property file="${user.home}/${ant.project.name}-build.properties" />
	<property file="build.properties" />

	<!--
	==============================================================================
	                  Import non-standard ANT task definitions
	==============================================================================
	-->

	<path id="project.classpath">
		<pathelement location="${svnjavahl.jar}" />
		<pathelement location="${svnant.jar}" />
		<pathelement location="${svnClientAdapter.jar}" />
		<pathelement location="${statsvn.jar}" />
		<pathelement location="${pyAntTasks.jar}" />
	</path>

	<taskdef resource="svntask.properties" classpathref="project.classpath" />
	<taskdef name="statsvn" classname="net.sf.statsvn.ant.StatSvnTask" classpathref="project.classpath" />
	
	<!-- <taskdef resource="pyAntTasks.properties" classpath="project.classpath" /> -->
	<taskdef name="py-run" classname="org.pyant.tasks.PythonRunTask" classpathref="project.classpath" />
	<taskdef name="py-compile" classname="org.pyant.tasks.PythonCompileTask" classpathref="project.classpath" />
	<taskdef name="py-test" classname="org.pyant.tasks.PythonTestTask" classpathref="project.classpath" />
	<taskdef name="py-doc" classname="org.pyant.tasks.PythonDocTask" classpathref="project.classpath" />
	<taskdef name="py-cover" classname="org.pyant.tasks.PythonCoverageTask" classpathref="project.classpath" />

	<!--
	==============================================================================
	                  Utility Targets for Build File Usage
	==============================================================================
	--> 

	<target name="usage" description="Writes instructions on how to to use build file and build tools to console">
		<echo message="  Execute 'ant -p' for build file help." /> 
		<echo message="  Execute 'ant -help' for Ant help." />
		<echo message="Machine specific ANT build properties should be in: ${user.home}/universal-build.properties" />
		<echo message="User specific ANT build properties for this project should be in: ${user.home}/${ant.project.name}-build.properties" />
	</target>
	
	<target name="debug" description="Dumps build properties to console"> 
		<echoproperties />
	</target>

	<!--
	==============================================================================
	                Perform full build: Build, Test, Document
	==============================================================================
	--> 
	
	<target name="all" depends="compile,test,docs">
		<echo message="Building all targets" />
	</target>
	
	<!--
	==============================================================================
	                    Initialize anything needed for build
	==============================================================================
	--> 
	
	<target name="init" depends="clean" description="Gets timestamp and creates directory structure used during the build">
		<!-- Set three properties with the standard formats: start.DSTAMP, start.TSTAMP, and start.TODAY -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/reports/coverage" />
		<mkdir dir="${doc.dir}/pydoc" />
		<echo message="Created directory's necesary for build" />
	</target>
	
	<!--
	==============================================================================
             Clean out any compiled code or files generated by the build.
	==============================================================================
	-->
	
	<target name="clean" description="Cleans out previous builds artifacts">
		<delete includeemptydirs="true">
			<fileset dir="${src.dir}">
				<include name="**/*.pyc"/>
				<include name="**/*.pyo"/>
			</fileset>
			<fileset dir="${build.dir}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${doc.dir}/pydoc">
				<include name="**/*"/>
			</fileset>
		</delete>
		<echo message="Removed all previous build artifacts" />
	</target>
	

	<!--
	==============================================================================
	                  Compiles all files under source directory
	==============================================================================
	-->
	
	<target name="compile" depends="init" description="Compiles all files under source directory">
		<py-compile dir="src" optimize="0" pythonpath="build" />
		<echo message="Finished compiling" />
	</target>

	<target name="svn-validate" description="Verifies presence of required SVN login credentials">
		<fail message="Provide svn.repository.user" unless="svn.repository.user"/>
		<fail message="Provide svn.repository.password" unless="svn.repository.password"/>
	</target>
	
	<target name="build-version" depends="svn-validate" description="Get the current revision number from subversion repository">
		<exec executable="svn"
			output="_revision.xml"
			failonerror="true">
			<arg line="log . -r HEAD --xml --username ${svn.repository.user} --password ${svn.repository.password}"/>
		</exec>
		<xslt in="_revision.xml" out="_revision.property.xml" style="${ant.lib}/svn_log_revision.xsl" />
		<xmlproperty file="_revision.property.xml" keeproot="false"/>
		<property name="build.version" value="${project.version.major}.${project.version.minor}.${project.version.patch}.${svn.revision}" />
		<delete>
			<fileset dir="." includes="_revision*.xml"/>
		</delete>
		<echo message="Build ${build.version}" />
	</target>
	
	<target name="build-notes" depends="init,build-version" description="Creates machine and human readable build notes.">	
		<echo>Placing build notes for ${build.version} in README_${build.version}.txt and version.properties</echo>
		<!-- Create ANT file for other applications to use in their builds -->
		<propertyfile file="${build.dir}/version.properties">
			<entry key="project.name" value="${ant.project.name}" />
			<entry key="project.version.major" value="${project.version.major}" />
			<entry key="project.version.minor" value="${project.version.minor}" />
			<entry key="project.version.patch" value="${project.version.patch}" />
			<entry key="svn.revision" value="${svn.revision}" />
			<entry key="build.version" value="${build.version}" />
			<entry key="build.date" value="${DSTAMP}${TSTAMP}" />
		</propertyfile>
		<!-- Create human readable file for other developers -->
		<echo file="${build.dir}/README_${build.version}.txt">
Project:    ${ant.project.name}
Version:    ${build.version}
Build time: ${TODAY} at ${TSTAMP}
		</echo>
	</target>

	<!-- this will generate a SVN log file from the working copy -->
	<target name="build-svn-log" description="Saves the repository activity log in xml format.">
		<!-- create a log file for the statsvn to use -->
		<exec executable="svn" 
			  output="${build.dir}/reports/svn.log">
		    <arg line="log --xml -v --username ${svn.repository.user} --password ${svn.repository.password}"/>
		</exec>
		<echo message="SVN log created successfully."/>
	</target>
	
	<!-- 
	Use StatSVN plugin to generate a report and copy it to the developement server 
	   http://svn.statsvn.org/statsvnwiki/index.php/User_Manual
	   http://www.thecrumb.com/wiki/Automated_Subversion_Reports_w/StatSVN_and_Ant
	   notes="${build.dir}/reports/report-notes.txt"
	-->
	<target name="build-svn-report" depends="init,build-svn-log" description="Transforms the repository activity log into human readable format.">
		<statsvn title="Subversion Report"
		         path="."
		         log="${build.dir}/reports/svn.log"
		         outputDir="${build.dir}/reports/stats" />
		<echo message="StatSVN report created successfully."/>
	</target>
	
	<!--
	==============================================================================
	                             Execute Unit Tests 
	==============================================================================
	-->

	<target name="test" depends="compile" description="Treats any files under src/ that start with test_ as a Python unit test module">
		<py-test pythonpath="${src.dir}" dir=".">
			<fileset dir="${src.dir}">
				<include name="test_*.py"/>
				<include name="**/test_*.py"/>
			</fileset>
		</py-test>
	</target>
	
	<target name="coverage" depends="compile" description="Treats any files under src/ that start with test_ as a Python unit test module">
		<!-- To test py-cover on command line, use:   C:/Workbench/Python25/Scripts/coverage.py -r -m my_file.py		-->
		<fail message="Provide path to coverage.py in universal-build.properties[coverage.path]" unless="coverage.path"/>
  		<py-cover
  			packagedtests="false" 
  			pythonpath="${src.dir}"
			reportsDir="${build.dir}/reports/coverage" 
			coverage="${coverage.path}/coverage.py">
			<tests dir="${src.dir}">
				<include name="test_*.py"/>
				<include name="**/test_*.py"/>
			</tests>
			<src dir="${src.dir}">
				<include name="*.py" />
				<include name="**/*.py" />
				<exclude name="test_*"/>
				<exclude name="**/test_*"/>
			</src>
		</py-cover>
		<echo message="Finished testing" />
	</target>
	
	<!--
	==============================================================================
	                         Generate all documentation
	==============================================================================
	-->

	<target name="docs" depends="compile" description="Generates all documentation">
		<py-doc pythonpath="${src.dir}" destdir="${doc.dir}/pydoc">
			<fileset dir="${src.dir}">
				<include name="**/*"/>
			</fileset>
		</py-doc>
		<echo message="Finished generating documentation" />
	</target>

</project>